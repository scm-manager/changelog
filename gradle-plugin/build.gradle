/*
 * MIT License
 *
 * Copyright (c) 2020-present Cloudogu GmbH and Contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


plugins {
  id 'java-gradle-plugin'
  id 'cloudogu.scm.java-conventions'
  id 'com.gradle.plugin-publish' version '0.12.0'
  id 'com.github.johnrengelman.shadow' version '6.1.0'
}

dependencies {
  compileOnly gradleApi()
  implementation project(":lib")
}

jar {
  enabled = false
  dependsOn(shadowJar { archiveClassifier = null })
}

gradlePlugin {
  // Define the plugin
  plugins {
    changelog {
      id = 'org.scm-manager.changelog'
      implementationClass = 'com.cloudogu.changelog.GradlePlugin'
    }
  }
}

// publish plugin
pluginBundle {
  website = 'https://scm-manager.org'
  vcsUrl = 'https://github.com/scm-manager/changelog'
  description = 'Plugin to manage changelog files'
  tags = ['scm-manager', 'changelog', 'markdown']
  plugins {
    changelog {
      displayName = 'Changelog Plugin'
    }
  }
}

// Add a source set for the functional test suite
sourceSets {
  functionalTest {
  }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  useJUnitPlatform()
}

check {
  // Run the functional tests as part of `check`
  dependsOn(tasks.functionalTest)
}

tasks.getByName("publish").configure {
  dependsOn "publishPlugins"
}
